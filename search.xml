<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Kylin的任务调度介绍]]></title>
    <url>%2F2019%2F03%2F30%2FKylin-s-job-scheduler%2F</url>
    <content type="text"><![CDATA[撰写中]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>kylin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kylin的元数据-任务]]></title>
    <url>%2F2019%2F03%2F30%2FKylin-s-metadata-execute%2F</url>
    <content type="text"><![CDATA[撰写中]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>kylin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kylin的元数据基础]]></title>
    <url>%2F2019%2F03%2F30%2FKylin-s-metadata-base%2F</url>
    <content type="text"><![CDATA[Apache Kylin元数据基础Apache Kylin的元数据包括 立方体描述（cube description）、立方体实例（cube instance）、项目（project）、模型描述（model description）、作业（job）、表（table）、字典(dictionary)等，参见： Kylin核心概念。在kylin集群中至关重要，假如元数据丢失，kylin集群将无法工作。 Kylin源码定义了ResourceStore这一抽象类来定义，其中定义了各种对元数据增删改查的方法，主要方法如： 1234567891011121314151617// 根据kylinConfig获得对应的ResourceStoreResourceStore getStore(KylinConfig kylinConfig)// 根据目录获取所有元数据路径NavigableSet&lt;String&gt; listResources(String folderPath)// 路径resPath下是否存在元数据boolean exists(String resPath) // 根据路径resPath及序列化器serializer返回对应的元数据&lt;T extends RootPersistentEntity&gt; T getResource(String resPath, Serializer&lt;T&gt; serializer) // 根据路径resPath写入元数据 public &lt;T extends RootPersistentEntity&gt; long putResource(String resPath, T obj, long ts, Serializer&lt;T&gt; serializer) // 删除路径resPath下的元数据void deleteResource(String resPath) ResourceStore类的主要子类继承关系图如下： Kylin支持多种数据源格式，如Hbase、Jdbc等，只要继承ResourceStore类并实现必须的Impl方法即可。 Kylin的所有序列化的元数据都继承自RootPersistentEntity抽象类，该类及其子类都使用了jackson的JsonAutoDetect注解。 例如CubeDesc部分代码如下： 1234567891011121314151617181920212223242526272829@SuppressWarnings(&quot;serial&quot;)@JsonAutoDetect(fieldVisibility = Visibility.NONE, getterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE)public class CubeDesc extends RootPersistentEntity implements IEngineAware &#123; //... @JsonProperty(&quot;name&quot;) private String name; @JsonProperty(&quot;is_draft&quot;) private boolean isDraft; @JsonProperty(&quot;model_name&quot;) private String modelName; @JsonProperty(&quot;description&quot;) private String description; @JsonProperty(&quot;null_string&quot;) private String[] nullStrings; @JsonProperty(&quot;dimensions&quot;) private List&lt;DimensionDesc&gt; dimensions; @JsonProperty(&quot;measures&quot;) private List&lt;MeasureDesc&gt; measures; @JsonProperty(&quot;dictionaries&quot;) @JsonInclude(JsonInclude.Include.NON_NULL) private List&lt;DictionaryDesc&gt; dictionaries; @JsonProperty(&quot;rowkey&quot;) private RowKeyDesc rowkey; @JsonProperty(&quot;hbase_mapping&quot;) private HBaseMappingDesc hbaseMapping; @JsonProperty(&quot;aggregation_groups&quot;) private List&lt;AggregationGroup&gt; aggregationGroups; // ...&#125; 对应在元数据库的json数据如下： 12345678910111213141516&#123; "uuid":"0ef9b7a8-3929-4dff-b59d-2100aadc8dbf", "last_modified":1451468470824, "version":"%default_version%", "name":"kylin_sales_cube", "is_draft":false, "model_name":"kylin_sales_model", "description":"", "null_string":null, "dimensions":[], "measures":[], "rowkey":&#123;&#125;, "hbase_mapping":&#123;&#125;, "aggregation_groups":[], ...&#125;]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>kylin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OSI七层模型的通俗理解]]></title>
    <url>%2F2019%2F03%2F12%2Fosi-tcpip%2F</url>
    <content type="text"><![CDATA[OSI七层模型的通俗理解 以你和你女朋友以书信的方式进行通信为例。 物理层：运输工具，比如火车、汽车 数据链路层：相当于货物核对单，表明里面有些什么东西，接受的时候确认一下是否正确（CRC检验） 网络层：相当于邮政局或快递公司地址（IP地址），能正确到达对方 传输层：信封（TCP协议是挂号信，是可靠的；UDP协议是平信，尽力送到对方，不保证一点送到对方） 会话层：相当于邮票，优质邮票寄一封信，相当与一个会话 表示层：你用普通话还是用方言？或者是英语？ 应用层：你可以说你的内容了，可以说是你爱她，也可以说你恨她。]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用gogs安装本地git服务(Centos环境)]]></title>
    <url>%2F2019%2F03%2F11%2Fgogs-install%2F</url>
    <content type="text"><![CDATA[使用gogs安装本地git服务(Centos环境)安装数据库Gogs支持MySQL、PostgreSQL、SQLite3、TiDB。安装过程这里不赘述，我们使用的是MySQL。 安装git1yum install -y git 添加git用户（gogs期望用git用户操作）1sudo useradd git 下载并安装根据自己的linux版本在 https://dl.gogs.io/ 下载安装包，linux版本根据uname -a查看 1wget https://dl.gogs.io/0.11.86/gogs_0.11.86_linux_amd64.tar.gz 解压 1tar -zxvf gogs_0.11.86_linux_amd64.tar.gz 进入解压的目录，执行 12cd gogs/./gogs web 打开${ip}:3000页面，出现如下配置页面 配置完数据库、端口、用户信息等 运行gogsControl+C暂停当前gogs进程，后台运行gogs 1nohup ./gogs web &amp; 打开${ip}:3000页面，注册后登陆]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hive 常用命令]]></title>
    <url>%2F2019%2F03%2F10%2Fhive-cli%2F</url>
    <content type="text"><![CDATA[Hive常用命令创建表： 1CREATE TABLE pokes (foo INT, bar STRING); 创建一个新表，结构与其他一样： 1create table new_table like records; 创建分区表： 1create table logs(ts bigint,line string) partitioned by (dt String,country String); 加载分区表数据： 1load data local inpath '/home/Hadoop/input/hive/partitions/file1' into table logs partition (dt='2001-01-01',country='GB'); 展示表中有多少分区： 1show partitions logs; 展示所有表： 1SHOW TABLES; 显示表的结构信息： 1DESCRIBE invites; 更新表的名称： 1ALTER TABLE source RENAME TO target; 添加新一列： 1ALTER TABLE invites ADD COLUMNS (new_col2 INT COMMENT 'a comment'); 添加新的一行： 1INSERT INTO test(name,pwd,createdate) values('name1','pwd1','2017-06-20 14:14:09'); 删除表： 1DROP TABLE records; 删除表中数据，但要保持表的结构定义： 1TRUNCATE TABLE table_name 从本地文件加载数据： 1LOAD DATA LOCAL INPATH '/home/hadoop/input/ncdc/micro-tab/sample.txt' OVERWRITE INTO TABLE records; 显示所有函数： 1show functions; 查看函数用法： 1describe function substr; 内连接： 1SELECT sales., things. FROM sales JOIN things ON (sales.id = things.id); 查看hive为某个查询使用多少个MapReduce作业: 1Explain SELECT sales., things. FROM sales JOIN things ON (sales.id = things.id); 外连接： 1SELECT sales., things. FROM sales LEFT OUTER JOIN things ON (sales.id = things.id); 创建视图： 1CREATE VIEW valid_records AS SELECT * FROM records2 WHERE temperature !=9999; INSERT OVERWRITE： 1INSERT OVERWRITE table tablename1 select a, b, c from tablename2; 参考：https://www.jianshu.com/p/a8e259b973ef]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F06%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hello world</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
